# Generated by Django 5.1.4 on 2025-01-11 14:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CrossMatchingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_no', models.CharField(help_text='Unique serial number of the cross-matching result.', max_length=255, unique=True)),
                ('amt_in_cc', models.FloatField(help_text='Amount in cc.')),
                ('blood_bank', models.CharField(help_text='Name of the blood bank.', max_length=255)),
                ('date_of_collection', models.DateField(help_text='Date the blood was collected.')),
                ('expiration_date', models.DateField(help_text='Expiration date of the blood.')),
                ('result', models.TextField(help_text='Result of the cross-matching.', max_length=255)),
            ],
            options={
                'verbose_name': 'Cross Matching Result',
                'verbose_name_plural': 'Cross Matching Results',
                'db_table': 'cross_matching_result',
                'ordering': ['-date_of_collection'],
            },
        ),
        migrations.CreateModel(
            name='RBSResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
            ],
            options={
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('license_number', models.CharField(db_index=True, max_length=10, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=255)),
                ('middlename', models.CharField(blank=True, max_length=255)),
                ('lastname', models.CharField(max_length=255)),
                ('age', models.PositiveIntegerField()),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('room_number', models.PositiveIntegerField()),
                ('sample_type', models.CharField(max_length=255)),
                ('time_of_collection', models.TimeField()),
                ('date_of_collection', models.DateField()),
                ('sars_result', models.CharField(max_length=255)),
                ('date', models.DateField(auto_now_add=True)),
                ('patient_type', models.CharField(choices=[('In Patient', 'In Patient'), ('Out Patient', 'Out Patient')], default='In Patient', max_length=100)),
                ('assigned_pathologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_technologist', to=settings.AUTH_USER_MODEL)),
                ('physician', models.ForeignKey(limit_choices_to={'groups__name': 'Physician'}, on_delete=django.db.models.deletion.CASCADE, related_name='physician', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('time_of_collection',),
            },
        ),
        migrations.CreateModel(
            name='LabRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Description for laboratory request', max_length=300)),
                ('lab_request_type', models.CharField(choices=[('Clinical Chemistry', 'Clinical Chemistry'), ('Cross Matching', 'Cross Matching'), ('Urinalysis', 'Urinalysis'), ('Hematology', 'Hematology'), ('Serology', 'Serology'), ('RBS', 'RBS')], help_text='Type of laboratory request', max_length=255)),
                ('date_request', models.DateTimeField(auto_now_add=True)),
                ('requested_by', models.ForeignKey(blank=True, limit_choices_to=models.Q(('groups__name', 'Doctor'), ('groups__name', 'Nurse'), _connector='OR'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='requested_by_lab', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(help_text='Patient needs to be examine', on_delete=django.db.models.deletion.CASCADE, related_name='patient_lab_requests', to='hospital_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Hematology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hemoglobin_mass_concentration', models.CharField(max_length=255)),
                ('hematocrit', models.CharField(max_length=255)),
                ('erythrocty_no_concentration', models.CharField(max_length=255)),
                ('platelet', models.IntegerField()),
                ('blood_type', models.CharField(choices=[('A+', 'A Positive'), ('A-', 'A Negative'), ('B+', 'B Positive'), ('B-', 'B Negative'), ('AB+', 'AB Positive'), ('AB-', 'AB Negative'), ('O+', 'O Positive'), ('O-', 'O Negative')], max_length=255)),
                ('rh_type', models.CharField(choices=[('+ (Positive)', 'Positive'), ('- (Negative)', 'Negative')], max_length=255)),
                ('leucocyte_no_concentration', models.FloatField()),
                ('segmenters', models.CharField(max_length=255)),
                ('lymphocytes', models.FloatField()),
                ('monocytes', models.FloatField()),
                ('eosinophils', models.FloatField()),
                ('basophils', models.FloatField()),
                ('re_test', models.BooleanField(default=False, help_text='Re-test Hematology')),
                ('date', models.DateField(auto_now_add=True)),
                ('assigned_pathologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_technologist', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_hematology', to='hospital_app.patient')),
            ],
            options={
                'verbose_name': 'Hematology',
                'verbose_name_plural': 'Hematology',
                'db_table': 'hematology',
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='CrossMatching',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('re_test', models.BooleanField(default=False, help_text='Re-test the cross-matching')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of record creation.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of last update.')),
                ('medical_technologist', models.ForeignKey(blank=True, help_text='Medical technologist handling the cross-matching.', limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='technologist_cross_matchings', to=settings.AUTH_USER_MODEL)),
                ('pathologist', models.ForeignKey(blank=True, help_text='Pathologist overseeing the cross-matching.', limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pathologist_cross_matchings', to=settings.AUTH_USER_MODEL)),
                ('results', models.ManyToManyField(help_text='Related cross-matching results.', related_name='cross_matchings', to='hospital_app.crossmatchingresult')),
                ('patient', models.ForeignKey(help_text='Patient associated with this cross-matching.', on_delete=django.db.models.deletion.CASCADE, related_name='cross_matchings', to='hospital_app.patient')),
            ],
            options={
                'verbose_name': 'Cross Matching',
                'verbose_name_plural': 'Cross Matchings',
                'db_table': 'cross_matching',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClinicalChemistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('glucose', models.FloatField()),
                ('cholesterol', models.FloatField()),
                ('triglycerides', models.FloatField()),
                ('hdl', models.FloatField()),
                ('ldl', models.FloatField()),
                ('creatinine', models.FloatField()),
                ('uric_acid', models.FloatField()),
                ('bun', models.FloatField()),
                ('sgpt', models.FloatField()),
                ('sgot', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('re_test', models.BooleanField(default=False, help_text='Re-test clinical chemistry results')),
                ('assigned_pathologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemical_chemist_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemical_chemist_technologist', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_clinical_chemistry', to='hospital_app.patient')),
            ],
            options={
                'verbose_name': 'Clinical Chemistry',
                'verbose_name_plural': 'Clinical Chemistry',
                'db_table': 'clinical_chemistry',
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='RBS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('re_test', models.BooleanField(default=False, help_text='Retest the RBS')),
                ('assigned_pathologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rbs_assigned_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rbs_assigned_technologist', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_rbs', to='hospital_app.patient')),
                ('rbs_result', models.ManyToManyField(help_text='Related RBS results.', related_name='rbs_results', to='hospital_app.rbsresult')),
            ],
        ),
        migrations.CreateModel(
            name='Serology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hb_determination', models.CharField(max_length=255)),
                ('typhidot_rapid_test', models.CharField(max_length=255)),
                ('dengue_rapid_test', models.CharField(max_length=255)),
                ('re_test', models.BooleanField(default=False, help_text='Re-test serology')),
                ('date', models.DateField(auto_now_add=True)),
                ('assigned_pathologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serology_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serology_technologist', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_serology', to='hospital_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Urinalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(help_text='Color', max_length=255)),
                ('appearance', models.CharField(help_text='Appearance', max_length=255)),
                ('specific_gravity', models.CharField(help_text='Specific Gravity', max_length=255)),
                ('pH', models.CharField(help_text='pH', max_length=255)),
                ('sugar', models.CharField(help_text='Sugar', max_length=255)),
                ('albumin', models.CharField(help_text='Albumin', max_length=255)),
                ('epithelia', models.CharField(help_text='Epithelia', max_length=255)),
                ('bacteria', models.CharField(help_text='Bacteria', max_length=255)),
                ('pus_cells', models.CharField(help_text='Pus Cells', max_length=255)),
                ('rbc', models.CharField(help_text='RBC', max_length=255)),
                ('cast', models.CharField(help_text='Cast', max_length=255)),
                ('crystals', models.CharField(help_text='Crystals', max_length=255)),
                ('others', models.CharField(help_text='Others', max_length=255)),
                ('amorphous', models.CharField(help_text='Amorphous', max_length=255)),
                ('mucous_thread', models.CharField(help_text='Mucous Thread', max_length=255)),
                ('pregnancy_test', models.CharField(blank=True, help_text='Pregnancy Test', max_length=255, null=True)),
                ('re_test', models.BooleanField(default=False, help_text='Re-test urinalysis')),
                ('urates', models.CharField(blank=True, help_text='Urates', max_length=255, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('assigned_pathologist', models.ForeignKey(blank=True, help_text='Pathologist name', limit_choices_to={'groups__name': 'Pathologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='urinalysis_assigned_pathologist', to=settings.AUTH_USER_MODEL)),
                ('assigned_technologist', models.ForeignKey(blank=True, help_text='Medical Technologist name', limit_choices_to={'groups__name': 'Medical Technologist'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='urinalysis_assigned_technologist', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_urinalysis', to='hospital_app.patient')),
            ],
            options={
                'ordering': ('date',),
            },
        ),
    ]
